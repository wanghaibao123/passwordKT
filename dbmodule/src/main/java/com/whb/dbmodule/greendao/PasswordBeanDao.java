package com.whb.dbmodule.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.whb.dbmodule.greendao.bean.PasswordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "password".
*/
public class PasswordBeanDao extends AbstractDao<PasswordBean, Long> {

    public static final String TABLENAME = "password";

    /**
     * Properties of entity PasswordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Userside = new Property(1, String.class, "userside", false, "USERSIDE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Passsord = new Property(3, String.class, "passsord", false, "PASSSORD");
        public final static Property Time = new Property(4, long.class, "time", false, "TIME");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Flag = new Property(6, boolean.class, "flag", false, "FLAG");
    }


    public PasswordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PasswordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"password\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERSIDE\" TEXT," + // 1: userside
                "\"NAME\" TEXT," + // 2: name
                "\"PASSSORD\" TEXT," + // 3: passsord
                "\"TIME\" INTEGER NOT NULL ," + // 4: time
                "\"DESC\" TEXT," + // 5: desc
                "\"FLAG\" INTEGER NOT NULL );"); // 6: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"password\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PasswordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userside = entity.getUserside();
        if (userside != null) {
            stmt.bindString(2, userside);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String passsord = entity.getPasssord();
        if (passsord != null) {
            stmt.bindString(4, passsord);
        }
        stmt.bindLong(5, entity.getTime());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
        stmt.bindLong(7, entity.getFlag() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PasswordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userside = entity.getUserside();
        if (userside != null) {
            stmt.bindString(2, userside);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String passsord = entity.getPasssord();
        if (passsord != null) {
            stmt.bindString(4, passsord);
        }
        stmt.bindLong(5, entity.getTime());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
        stmt.bindLong(7, entity.getFlag() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PasswordBean readEntity(Cursor cursor, int offset) {
        PasswordBean entity = new PasswordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userside
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // passsord
            cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.getShort(offset + 6) != 0 // flag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PasswordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserside(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPasssord(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.getLong(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlag(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PasswordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PasswordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PasswordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
